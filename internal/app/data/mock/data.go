// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/data/data.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	models "github.com/MihailSergeenkov/shortener/internal/app/models"
)

// MockStorager is a mock of Storager interface.
type MockStorager struct {
	ctrl     *gomock.Controller
	recorder *MockStoragerMockRecorder
}

// MockStoragerMockRecorder is the mock recorder for MockStorager.
type MockStoragerMockRecorder struct {
	mock *MockStorager
}

// NewMockStorager creates a new mock instance.
func NewMockStorager(ctrl *gomock.Controller) *MockStorager {
	mock := &MockStorager{ctrl: ctrl}
	mock.recorder = &MockStoragerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorager) EXPECT() *MockStoragerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockStorager) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStoragerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStorager)(nil).Close))
}

// DeleteShortURLs mocks base method.
func (m *MockStorager) DeleteShortURLs(ctx context.Context, urls []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteShortURLs", ctx, urls)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteShortURLs indicates an expected call of DeleteShortURLs.
func (mr *MockStoragerMockRecorder) DeleteShortURLs(ctx, urls interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteShortURLs", reflect.TypeOf((*MockStorager)(nil).DeleteShortURLs), ctx, urls)
}

// DropDeletedURLs mocks base method.
func (m *MockStorager) DropDeletedURLs(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropDeletedURLs", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropDeletedURLs indicates an expected call of DropDeletedURLs.
func (mr *MockStoragerMockRecorder) DropDeletedURLs(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropDeletedURLs", reflect.TypeOf((*MockStorager)(nil).DropDeletedURLs), ctx)
}

// FetchUserURLs mocks base method.
func (m *MockStorager) FetchUserURLs(ctx context.Context) ([]models.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchUserURLs", ctx)
	ret0, _ := ret[0].([]models.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchUserURLs indicates an expected call of FetchUserURLs.
func (mr *MockStoragerMockRecorder) FetchUserURLs(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchUserURLs", reflect.TypeOf((*MockStorager)(nil).FetchUserURLs), ctx)
}

// GetURL mocks base method.
func (m *MockStorager) GetURL(ctx context.Context, shortURL string) (models.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURL", ctx, shortURL)
	ret0, _ := ret[0].(models.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURL indicates an expected call of GetURL.
func (mr *MockStoragerMockRecorder) GetURL(ctx, shortURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURL", reflect.TypeOf((*MockStorager)(nil).GetURL), ctx, shortURL)
}

// Ping mocks base method.
func (m *MockStorager) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockStoragerMockRecorder) Ping(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockStorager)(nil).Ping), ctx)
}

// StoreShortURL mocks base method.
func (m *MockStorager) StoreShortURL(ctx context.Context, shortURL, originalURL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreShortURL", ctx, shortURL, originalURL)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreShortURL indicates an expected call of StoreShortURL.
func (mr *MockStoragerMockRecorder) StoreShortURL(ctx, shortURL, originalURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreShortURL", reflect.TypeOf((*MockStorager)(nil).StoreShortURL), ctx, shortURL, originalURL)
}

// StoreShortURLs mocks base method.
func (m *MockStorager) StoreShortURLs(ctx context.Context, urls []models.URL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreShortURLs", ctx, urls)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreShortURLs indicates an expected call of StoreShortURLs.
func (mr *MockStoragerMockRecorder) StoreShortURLs(ctx, urls interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreShortURLs", reflect.TypeOf((*MockStorager)(nil).StoreShortURLs), ctx, urls)
}
